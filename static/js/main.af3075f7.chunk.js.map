{"version":3,"sources":["webSocket/home.js","reducers/upstox-reducer.js","actions/action-types.js","reducers/index.js","store.js","actions/upstox-actions.js","webSocket/webSocket.js","webSocket/header.js","App.js","serviceWorker.js","index.js"],"names":["ReactFC","fcRoot","FusionCharts","TimeSeries","schemaFetch","fetch","then","res","json","dataSource","chart","caption","text","subcaption","yaxis","plot","value","open","high","low","close","type","title","Home","props","state","timeseriesDs","renderAt","width","height","onFetchData","bind","data","this","nextProps","fetchedData","getDataArrayToObject","ohclData","convertToOHLC","Promise","all","newdata","newschema","fusionTable","DataStore","createDataTable","Object","assign","setState","responseXml","i","newData","split","newDataObject","timestamp","volume","push","UNIX_timestamp","a","Date","getFullYear","getMonth","getDate","time","timeConverter","Number","className","React","Component","connect","store","upstoxState","intervel","initialState","liveData","upstoxReducer","action","console","log","reducers","combineReducers","createStore","applyMiddleware","thunk","receivedData","frequitlyFetchData","dispatch","getState","headers","mode","response","receivedLiveData","setTimeout","frequitlyFetchDataContinue","WebSocket","previousData","JSON","parse","today","dateTime","getHours","getMinutes","getSeconds","undefined","name","price","color","difference","keyData","upstoxAction","clearInterval","intervalID","to","App","date","path","component","HomePage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.af3075f7.chunk.js","sourcesContent":["import React from 'react';\nimport {connect} from \"react-redux\";\n\nimport FusionCharts from \"fusioncharts\";\nimport TimeSeries from \"fusioncharts/fusioncharts.timeseries\";\nimport ReactFC from \"react-fusioncharts\";\n\n\nReactFC.fcRoot(FusionCharts, TimeSeries);\n\n\nconst jsonify = res => res.json();\n\nconst schemaFetch = fetch(\n    \"https://s3.eu-central-1.amazonaws.com/fusion.store/ft/schema/ohlc-chart-schema.json\"\n).then(jsonify);\n\nconst dataSource = {\n    chart: {},\n    caption: {\n        text: \"UPSTOX Composite Index\"\n    },\n    subcaption: {\n        text: \"From 2005 -  2014\"\n    },\n    yaxis: [\n        {\n            plot: [\n                {\n                    value: {\n                        open: \"Open\",\n                        high: \"High\",\n                        low: \"Low\",\n                        close: \"Close\"\n                    },\n                    type: \"ohlc\"\n                }\n            ],\n            title: \"Index Value\"\n        }\n    ]\n};\n\n\nclass Home extends React.Component {\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            timeseriesDs: {\n                type: \"timeseries\",\n                renderAt: \"container\",\n                width: \"100%\",\n                height: \"500\",\n                dataSource\n            }\n        };\n        this.onFetchData = this.onFetchData.bind(this);\n    }\n\n    componentDidMount() {\n        let data = this.props.data\n        this.onFetchData(data);\n    }\n\n    componentWillReceiveProps(nextProps)\n    {\n        this.onFetchData(nextProps.data);\n    }\n    onFetchData(fetchedData) {\n\n        let data = this.getDataArrayToObject(fetchedData);\n        let ohclData = this.convertToOHLC(data)\n\n        Promise.all([ohclData, schemaFetch]).then(res => {\n            let newdata = res[0];\n            let newschema = res[1];\n            const fusionTable = new FusionCharts.DataStore().createDataTable(\n                newdata,\n                newschema\n            );\n\n            const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n\n            timeseriesDs.dataSource.data = fusionTable;\n            this.setState({\n                timeseriesDs\n            });\n        });\n    }\n\n\n\n    getDataArrayToObject(data)\n    {\n        let responseXml = [];\n        for (let i in data)\n        {\n            let str = data[i];\n            let newData = str.split(\",\");\n            let newDataObject = {\n                timestamp : newData[0],\n                open: newData[1],\n                high: newData[2],\n                low: newData[3],\n                close: newData[4],\n                volume: newData[5],\n            };\n            responseXml.push(newDataObject)\n        }\n        return responseXml;\n\n    }\n\n\n     timeConverter(UNIX_timestamp){\n        var a = new Date(UNIX_timestamp * 1000);\n        var months = ['01','02','03','04','05','06','07','08','09','10','11','12'];\n        var year = a.getFullYear();\n        var month = months[a.getMonth()];\n        var date = a.getDate();\n        var time = year + '-' + month + '-' + date ;\n        return time;\n    }\n\n    convertToOHLC(data)\n    {\n\n        let responseXml = [];\n\n        for (let i in data)\n        {\n            let time = this.timeConverter(data[i][\"timestamp\"] / 1000);\n            responseXml[i] = [\n                time,\n                Number(data[i][\"open\"]),\n                Number(data[i][\"high\"]),\n                Number(data[i][\"low\"]),\n                Number(data[i][\"close\"]),\n                Number(data[i][\"volume\"])\n            ]\n        }\n        return responseXml;\n    };\n\n\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h1 className=\"page--title\">UPSTOX OVERVIEWS</h1>\n                {this.state.timeseriesDs.dataSource.data ? (\n                    <ReactFC {...this.state.timeseriesDs} />\n                ) : (\n                    \"loading\"\n                )}\n\n            </div>\n\n        )\n    }\n}\n\n\nconst mapStateToProps = function (store) {\n    return {\n        data: store.upstoxState.data,\n        intervel : store.intervel\n    }\n}\n\nexport default connect(mapStateToProps)(Home);\n","import * as actionType from '../actions/action-types';\n\nconst initialState = {\n    data: {},\n    intervel : 1,\n    liveData :{}\n};\n\n\nconst upstoxReducer = function (state = initialState, action) {\n    switch (action.type) {\n        case actionType.GET_DATA_SUCCESS:\n            return Object.assign({}, state, {data: action.data});\n        case actionType.GET_LIVE_DATA_SUCCESS:\n                console.log(\"actionTypeintervel\",state.intervel)\n            return Object.assign({}, state, {liveData: action.data, intervel: (state.intervel + 1)});\n    }\n\n    return state\n};\n\nexport default upstoxReducer;\n","export const GET_DATA_SUCCESS = 'GET_DATA_SUCCESS'\nexport const GET_LIVE_DATA_SUCCESS = 'GET_LIVE_DATA_SUCCESS'\n","import {combineReducers} from 'redux';\n\nimport upstoxReducer from './upstox-reducer'\n\nlet reducers = combineReducers({\n    upstoxState: upstoxReducer\n});\n\nexport default reducers\n","import {createStore, applyMiddleware} from 'redux';\nimport reducers from './reducers';\nimport thunk from 'redux-thunk';\n\nconst store = createStore (reducers, applyMiddleware(thunk))\n\nexport default store;\n\n\n","import * as actionTypes from './action-types'\nimport store from \"../store\"\n\nexport function receivedData(data)\n{\n    return {\n        type: actionTypes.GET_DATA_SUCCESS,\n        data: data\n    }\n\n}\n\nexport function getAuthenticationStatus()\n{\n    return (dispatch, getState) => {\n        const url = 'https://jsonplaceholder.typicode.com/todos/1';\n\n        fetch(url)\n            .then((response) =>\n                response.json().then(function(data) {\n                   dispatch(receivedData(data));\n                })\n            )\n    }\n}\n\n\nexport  function fetchData(intervel)\n{\n    return (dispatch, getState) => {\n        let newUrl = 'http://kaboom.rksv.net/api/historical?interval='+intervel;\n         fetch(newUrl,{\n            headers: {\n                'Content-Type': 'application/json',\n            },\n             mode: 'no-cors'\n        })\n             .then((response) =>\n                 response.json().then(function(data) {\n                     dispatch(receivedData(data));\n                 })\n             )\n    }\n}\n\n\nexport  function frequitlyFetchData(intervel)\n{\n    return (dispatch, getState) => {\n        let newUrl = 'http://kaboom.rksv.net/api/historical?interval='+intervel;\n        fetch(newUrl,{\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            mode: 'no-cors'\n        })\n            .then((response) =>\n                response.json().then(function(data) {\n                    dispatch(receivedLiveData(data));\n                    frequitlyFetchDataContinue(intervel+1)\n                })\n            )\n    }\n}\n\n\nexport  function frequitlyFetchDataContinue(intervel)\n{\n\n        let newUrl = 'http://kaboom.rksv.net/api/historical?interval='+intervel;\n        fetch(newUrl,{\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            mode: 'no-cors', // no-cors\n        })\n            .then((response) =>\n                response.json().then(function(data) {\n                    store.dispatch(receivedLiveData(data));\n                    setTimeout(function() {\n                        store.dispatch(frequitlyFetchData(intervel+1))\n                    }, 5000);\n                })\n            )\n\n}\n\n\nexport function receivedLiveData(data)\n{\n    return {\n        type: actionTypes.GET_LIVE_DATA_SUCCESS,\n        data: data\n    }\n\n}","import React from 'react';\n//import Websocket from 'react-websocket';\n\nimport FusionCharts from \"fusioncharts\";\nimport TimeSeries from \"fusioncharts/fusioncharts.timeseries\";\nimport ReactFC from \"react-fusioncharts\";\nimport connect from \"react-redux/es/connect/connect\";\nimport * as upstoxAction from \"../actions/upstox-actions\";\n\n\nReactFC.fcRoot(FusionCharts, TimeSeries);\n\n\nconst jsonify = res => res.json();\n\nconst schemaFetch = fetch(\n    \"https://s3.eu-central-1.amazonaws.com/fusion.store/ft/schema/ohlc-chart-schema.json\"\n).then(jsonify);\n\nconst dataSource = {\n    chart: {},\n    caption: {\n        text: \"UPSTOX Composite Live Index\"\n    },\n    subcaption: {\n        text: \"From 2005 -  2014\"\n    },\n    yaxis: [\n        {\n            plot: [\n                {\n                    value: {\n                        open: \"Open\",\n                        high: \"High\",\n                        low: \"Low\",\n                        close: \"Close\"\n                    },\n                    type: \"ohlc\"\n                }\n            ],\n            title: \"Index Value\"\n        }\n    ]\n};\n\n\nclass WebSocket extends React.Component {\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            data: [],\n            timeseriesDs: {\n                type: \"timeseries\",\n                renderAt: \"container\",\n                width: \"100%\",\n                height: \"500\",\n                dataSource\n            }\n        };\n        this.onFetchData = this.onFetchData.bind(this);\n    }\n\n    intervalID;\n    handleData(data)\n    {\n        let dataFormatted = [];\n        let previousData = this.state.data;\n        data = JSON.parse(data);\n        let today = new Date();\n        let date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n        let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n        let dateTime = date + ' ' + time;\n        for (let i in data)\n        {\n            if (previousData[data[i][0]] == undefined)\n            {\n                previousData[data[i][0]] = {name: data[i][0], price: data[i][1], color: '', time: dateTime, difference: 0};\n            }\n            else\n            {\n                let color = '';\n                let keyData = previousData[data[i][0]];\n                let difference = keyData.price - data[i][1];\n                if (keyData.price > data[i][1])\n                {\n                    color = 'green';\n                }\n                else\n                {\n                    color = 'red';\n                }\n                previousData[data[i][0]] = {name: data[i][0], price: data[i][1], color: color, time: dateTime, difference: difference};\n            }\n        }\n        this.setState({data: previousData});\n    }\n\n\n    componentWillReceiveProps(nextProps)\n    {\n        this.onFetchData(nextProps.data);\n       // this.intervalID  = setTimeout(this.props.dispatch(upstoxAction.frequitlyFetchData(this.props.intervel)), 100000);\n\n        // for (let i in 50000)\n        // {\n        //     if(i >= 45000)\n        //     {\n        //         this.props.dispatch(upstoxAction.frequitlyFetchData(this.props.intervel))\n        //         break;\n        //     }\n        // }\n        //setInterval(this.props.dispatch(upstoxAction.frequitlyFetchData(nextProps.intervel)), 5000);\n\n    }\n    componentDidMount()\n    {\n        let data = this.props.data\n        this.onFetchData(data);\n        console.log(\"sssssssss\");\n        this.props.dispatch(upstoxAction.frequitlyFetchData(this.props.intervel))\n\n\n    }\n    onFetchData(fetchedData) {\n\n        let data = this.getDataArrayToObject(fetchedData);\n        let ohclData = this.convertToOHLC(data)\n\n        Promise.all([ohclData, schemaFetch]).then(res => {\n            let newdata = res[0];\n            let newschema = res[1];\n            const fusionTable = new FusionCharts.DataStore().createDataTable(\n                newdata,\n                newschema\n            );\n\n            const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n\n            timeseriesDs.dataSource.data = fusionTable;\n            this.setState({\n                timeseriesDs\n            });\n        });\n    }\n\n    componentWillUnmount() {\n        /*\n          stop getData() from continuing to run even\n          after unmounting this component\n        */\n        clearInterval(this.intervalID);\n    }\n\n\n    getDataArrayToObject(data)\n    {\n        let responseXml = [];\n        for (let i in data)\n        {\n            let str = data[i];\n            let newData = str.split(\",\");\n            let newDataObject = {\n                timestamp : newData[0],\n                open: newData[1],\n                high: newData[2],\n                low: newData[3],\n                close: newData[4],\n                volume: newData[5],\n            };\n            responseXml.push(newDataObject)\n        }\n        return responseXml;\n\n    }\n\n\n    timeConverter(UNIX_timestamp){\n        var a = new Date(UNIX_timestamp * 1000);\n        var months = ['01','02','03','04','05','06','07','08','09','10','11','12'];\n        var year = a.getFullYear();\n        var month = months[a.getMonth()];\n        var date = a.getDate();\n        var time = year + '-' + month + '-' + date ;\n        return time;\n    }\n\n    convertToOHLC(data)\n    {\n\n        let responseXml = [];\n\n        for (let i in data)\n        {\n            let time = this.timeConverter(data[i][\"timestamp\"] / 1000);\n            responseXml[i] = [\n                time,\n                Number(data[i][\"open\"]),\n                Number(data[i][\"high\"]),\n                Number(data[i][\"low\"]),\n                Number(data[i][\"close\"]),\n                Number(data[i][\"volume\"])\n            ]\n        }\n        return responseXml;\n    };\n\n    render()\n    {\n        //console.log('this.state.data', this.state.data)\n\n\n        return (\n            <div className=\"App\">\n                {/*<Websocket url='ws://stocks.mnet.website/'*/}\n                           {/*onMessage={this.handleData.bind(this)}/>*/}\n\n                    <h1 className=\"page--title\">UPSTOX LIVE CHART</h1>\n                    {\n                        this.state.timeseriesDs.dataSource.data ? (\n                        <ReactFC {...this.state.timeseriesDs} />\n                    ) : (\n                        \"loading\"\n                    )}\n\n            </div>\n\n        )\n    }\n}\n\n\nconst mapStateToProps = function (store) {\n    return {\n        data: store.upstoxState.liveData,\n        intervel : store.upstoxState.intervel\n    }\n}\n\nexport default connect(mapStateToProps)(WebSocket);\n","import React from 'react';\nimport {NavLink} from 'react-router-dom';\n\n\nclass Home extends React.Component {\n    constructor(props)\n    {\n        super(props);\n    }\n\n\n\n    render() {\n        return (\n            <div className=\"header\">\n                <div className=\"navMenu\">\n                    <ul>\n                        <li>\n                            <NavLink to={\"/home\"}>Home</NavLink>\n                        </li>\n                        <li>\n                            <NavLink to={\"/liveChart\"}> Live Chart</NavLink>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n\n        )\n    }\n}\n\n\nexport default Home;","import React from 'react';\n\nimport {HashRouter, Route, Switch, Redirect} from 'react-router-dom';\nimport HomePage from './webSocket/home'\nimport WebSocket from './webSocket/webSocket'\nimport Header from './webSocket/header'\nimport './App.css';\n\nimport {connect} from 'react-redux';\nimport * as action from './actions/upstox-actions'\nimport * as upstoxAction from './actions/upstox-actions';\n\n\n\nclass App extends React.Component {\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            name: '',\n            price: '',\n            date: ''\n        };\n\n    }\n    componentDidMount(){\n       // this.props.dispatch(action.getAuthenticationStatus())\n        this.props.dispatch(upstoxAction.fetchData(this.props.intervel))\n\n        console.log('data ', this.props.data);\n    }\n\n\n    render()\n    {\n        return (\n            <div className=\"App\">\n                <div className=\"container\">\n                    <HashRouter>\n                        <Header />\n                        <Switch>\n                            <Route path=\"/home:activeTab?\" component={HomePage}/>\n                            <Route path=\"/liveChart:activeTab?\" component={WebSocket}/>\n                            <Redirect to=\"/home\"/>\n                        </Switch>\n                    </HashRouter>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = function (store) {\n    return {\n        data: store.upstoxState.data\n    }\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './store';\nimport { Provider } from 'react-redux';\n\n\nReactDOM.render(\n\n      <Provider store={store}>\n          <React.StrictMode><App /></React.StrictMode>\n      </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}